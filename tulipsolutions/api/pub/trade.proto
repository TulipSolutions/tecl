// Copyright 2019 Tulipsolutions B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// [#protodoc-title: Public trade]

syntax = "proto3";
package tulipsolutions.api.pub;

option java_multiple_files = true;
option java_package = "nl.tulipsolutions.api.pub";
option go_package = "github.com/tulipsolutions/tecl/tulipsolutions/api/pub/trade";

import "validate/validate.proto";
import "tulipsolutions/api/common/orders.proto";
import "tulipsolutions/api/common/options.proto";

// Request for public trades on a single market. If ``trade_id`` and ``timestamp_ns`` are not provided, it will return
// the most recent amount of trades, limited by the number given in ``limit``.
message GetPublicTradesRequest {
    common.Market market = 1 [(validate.rules).enum = { not_in: [ 0 ], defined_only: true }];
    // From which trade_id or timestamp trades will be returned, default: (latest trade id - limit)
    oneof from {
        // Return trades with id greater or equal to the one given.
        fixed64 trade_id = 2 [(validate.rules).fixed64.gt = 0];
        // Return trades with timestamp greater or equal. Unit in nanoseconds.
        fixed64 timestamp_ns = 3 [(validate.rules).fixed64.gt = 0];
    }
    // Maximum number of trades returned. Defaults to 1000.
    uint32 limit = 4 [(validate.rules).uint32 = { gte: 0, lte: 1000 }, (common.default_limit) = 1000];
}

// Stream for public trades on a single market. If ``trade_id`` and ``timestamp_ns`` are not provided, it will only
// stream trades occurred after initiation of the request.
message StreamPublicTradesRequest {
    common.Market market = 1 [(validate.rules).enum = { not_in: [ 0 ], defined_only: true }];
    oneof from {
        // Stream trades with id greater or equal to the one given.
        fixed64 trade_id = 2 [(validate.rules).fixed64.gt = 0];
        // Stream trades with timestamp greater or equal. Unit in nanoseconds.
        fixed64 timestamp_ns = 3 [(validate.rules).fixed64.gt = 0];
    }
}

message PublicTrade {
    common.Market market = 1;
    // See also: :ref:`faq_trade_order_id_unique`
    fixed64 trade_id = 2;
    double price = 3;
    double base_amount = 4;
    double quote_amount = 5;
    common.Side side = 6;
    fixed64 timestamp_ns = 7;
}

message PublicTrades {
    repeated PublicTrade trades = 1;
}

service PublicTradeService {
    rpc GetTrades(GetPublicTradesRequest) returns (PublicTrades);
    rpc StreamTrades(StreamPublicTradesRequest) returns (stream PublicTrade);
}
