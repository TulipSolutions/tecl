// Copyright 2019 Tulip Solutions B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// [#protodoc-title: Ticker]

syntax = "proto3";
package tulipsolutions.api.pub;

option java_multiple_files = true;
option java_package = "nl.tulipsolutions.api.pub";
option go_package = "github.com/tulipsolutions/tecl/tulipsolutions/api/pub/ticker";

import "validate/validate.proto";
import "tulipsolutions/api/common/orders.proto";

message GetTickersRequest {
    // Only return tickers for provided markets. If empty, tickers for all markets are returned.
    repeated common.Market markets = 1 [
        (validate.rules).repeated .unique = true,
        (validate.rules).repeated .items.enum = { not_in: [ 0 ], defined_only: true }
    ];
}

message StreamTickersRequest {
    // Only stream tickers for provided markets. If empty, tickers for all markets are streamed.
    repeated common.Market markets = 1 [
        (validate.rules).repeated .unique = true,
        (validate.rules).repeated .items.enum = { not_in: [ 0 ], defined_only: true }
    ];
}

message Tick {
    common.Market market = 1;
    double mid_price = 2;
    double best_buy_price = 3;
    double best_sell_price = 4;
    double best_buy_size = 5;
    double best_sell_size = 6;
    double daily_open = 7;
    double daily_high = 8;
    double daily_low = 9;
    double daily_close = 10;
    double daily_volume_base = 11;
    double daily_volume_quote = 12;
}

message Tickers {
    repeated Tick ticks = 1;
}

service PublicTickerService {
    rpc GetTickers(GetTickersRequest) returns (Tickers);
    rpc StreamTickers(StreamTickersRequest) returns (stream Tick);
}
