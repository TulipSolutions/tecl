// Copyright 2019 Tulip Solutions B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// [#protodoc-title: Private order]

syntax = "proto3";
package tulipsolutions.api.priv;

option java_multiple_files = true;
option java_package = "nl.tulipsolutions.api.priv";
option go_package = "github.com/tulipsolutions/tecl/tulipsolutions/api/priv/order";

import "validate/validate.proto";
import "tulipsolutions/api/common/orders.proto";
import "tulipsolutions/api/priv/message_authentication.proto";

message LimitOrderStatus {
    common.Side side = 1;
    double base_amount = 2;
    double price = 4;
    double base_remaining = 5;
}

message OrderbookSnapshot {
    repeated ActiveOrderStatus orders = 1;
}

// The status and details of an order in the orderbook.
//
// A message with empty `oneof order` indicates the order was removed from the orderbook
message ActiveOrderStatus {
    // See also: :ref:`faq_trade_order_id_unique`
    fixed64 order_id = 1 [jstype = JS_STRING];
    common.Market market = 3;
    oneof order {
        LimitOrderStatus limit_order = 4;
    }
}

message LimitOrderRequest {
    common.Side side = 1 [(validate.rules).enum = { not_in: [ 0 ], defined_only: true }];
    double base_amount = 2 [(validate.rules).double.gt = 0];
    double price = 3 [(validate.rules).double.gt = 0];
}

message CreateOrderRequest {
    common.Market market = 1 [(validate.rules).enum = { not_in: [ 0 ], defined_only: true }];
    oneof order_type {
        option (validate.required) = true;
        LimitOrderRequest limit_order = 2;
    }
    fixed64 tonce = 4 [jstype = JS_STRING, (validate.rules).fixed64.gt = 0];
    // Value is set by the message interceptor of the Tulip Exchange client library. Do not set it manually. See also
    // :ref:`authentication_request_authentication`.
    Signed signed = 5;
}

message LimitOrderResponse {
    common.Side side = 1;
    double base_amount = 2;
    double price = 3;
}

message CreateOrderResponse {
    fixed64 order_id = 1 [jstype = JS_STRING];
    common.Market market = 2;
    oneof order_type {
        LimitOrderResponse limit_order = 3;
    }
}

message CancelOrderRequest {
    fixed64 order_id = 1 [jstype = JS_STRING, (validate.rules).fixed64.gt = 0];
    common.Market market = 2 [(validate.rules).enum = { not_in: [ 0 ], defined_only: true }];
    fixed64 tonce = 3 [jstype = JS_STRING, (validate.rules).fixed64.gt = 0];
    // Value is set by the message interceptor of the Tulip Exchange client library. Do not set it manually. See also
    // :ref:`authentication_request_authentication`.
    Signed signed = 4;
}

message CancelOrderResponse {
    fixed64 order_id = 1 [jstype = JS_STRING];
    common.Market market = 2;
}

message GetActiveOrdersRequest {
}

message StreamActiveOrdersRequest {
}

service PrivateOrderService {
    rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse);
    rpc CancelOrder(CancelOrderRequest) returns (CancelOrderResponse);
}

service PrivateActiveOrdersService {
    rpc GetActiveOrders(GetActiveOrdersRequest) returns (OrderbookSnapshot);
    rpc StreamActiveOrders(StreamActiveOrdersRequest) returns (stream ActiveOrderStatus);
}
