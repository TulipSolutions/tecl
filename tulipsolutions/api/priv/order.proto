// Copyright 2019 Tulip Solutions B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// [#protodoc-title: Private order]

syntax = "proto3";
package tulipsolutions.api.priv;

option java_multiple_files = true;
option java_package = "nl.tulipsolutions.api.priv";
option go_package = "github.com/tulipsolutions/tecl/tulipsolutions/api/priv/order";

import "validate/validate.proto";
import "tulipsolutions/api/common/orders.proto";
import "tulipsolutions/api/common/options.proto";
import "tulipsolutions/api/priv/message_authentication.proto";

message LimitOrderStatus {
    common.Side side = 1;
    double base_amount = 2;
    double price = 4;
    double base_remaining = 5;
}

message OrderbookSnapshot {
    repeated ActiveOrderStatus orders = 1;
}

// The status and details of an order in the orderbook.
//
// A message with empty `oneof order` indicates the order was removed from the orderbook
message ActiveOrderStatus {
    // See also: :ref:`faq_trade_order_id_unique`
    fixed64 order_id = 1 [jstype = JS_STRING];
    common.Market market = 3;
    oneof order {
        LimitOrderStatus limit_order = 4;
    }
    fixed64 deadline_ns = 5;
}

message LimitOrderRequest {
    common.Side side = 1 [(validate.rules).enum = { not_in: [ 0 ], defined_only: true }];
    double base_amount = 2 [(validate.rules).double.gt = 0];
    double price = 3 [(validate.rules).double.gt = 0];
}

message MarketOrderRequest {
    common.Side side = 1 [(validate.rules).enum = { not_in: [ 0 ], defined_only: true }];
    double base_amount = 2 [(validate.rules).double.gt = 0];
}

message CreateOrderRequest {
    common.Market market = 1 [(validate.rules).enum = { not_in: [ 0 ], defined_only: true }];
    oneof order_type {
        option (validate.required) = true;
        LimitOrderRequest limit_order = 2;
        MarketOrderRequest market_order = 3;
    }
    fixed64 tonce = 4 [jstype = JS_STRING, (validate.rules).fixed64.gt = 0];
    // Value is set by the message interceptor of the Tulip Exchange client library. Do not set it manually. See also
    // :ref:`authentication_request_authentication`.
    Signed signed = 5;
    // The timestamp until the order is active, after which it is automatically canceled. Unit is absolute timestamp
    // in nanoseconds since unix epoch. The default of ``0`` means infinite lifetime ("Good-Til-Cancelled").
    fixed64 deadline_ns = 6;
}

message LimitOrderResponse {
    common.Side side = 1;
    double base_amount = 2;
    double price = 3;
}

message MarketOrderResponse {
    common.Side side = 1;
    double base_amount = 2;
}

message CreateOrderResponse {
    fixed64 order_id = 1 [jstype = JS_STRING];
    common.Market market = 2;
    oneof order_type {
        LimitOrderResponse limit_order = 3;
        MarketOrderResponse market_order = 4;
    }
    fixed64 deadline_ns = 5;
}

message CancelOrderRequest {
    fixed64 order_id = 1 [jstype = JS_STRING, (validate.rules).fixed64.gt = 0];
    common.Market market = 2 [(validate.rules).enum = { not_in: [ 0 ], defined_only: true }];
    fixed64 tonce = 3 [jstype = JS_STRING, (validate.rules).fixed64.gt = 0];
    // Value is set by the message interceptor of the Tulip Exchange client library. Do not set it manually. See also
    // :ref:`authentication_request_authentication`.
    Signed signed = 4;
}

message CancelOrderResponse {
    fixed64 order_id = 1 [jstype = JS_STRING];
    common.Market market = 2;
}

message CreateLimitOrderEvent {
    common.Side side = 1;
    double base_amount = 2;
    double price = 3;
}

message CreateMarketOrderEvent {
    common.Side side = 1;
    double base_amount = 2;
}

message CreateOrderEvent {
    oneof order_type {
        CreateLimitOrderEvent create_limit_order = 2;
        CreateMarketOrderEvent create_market_order = 3;
    }
    fixed64 deadline_ns = 6;
}

message CancelOrderEvent {}

message FillOrderEvent {
    double price = 1;
    double base_amount = 2;
    double quote_amount = 3;
    double fee = 4;
    common.Currency fee_currency = 5;
    common.Side side = 6;
}

message OrderEvent {
    fixed64 event_id = 1 [jstype = JS_STRING];
    fixed64 order_id = 2 [jstype = JS_STRING];
    common.Market market = 3;
    fixed64 timestamp_ns = 4 [jstype = JS_STRING];
    oneof event {
        CreateOrderEvent create_order_event = 5;
        FillOrderEvent fill_order_event = 6;
        CancelOrderEvent cancel_order_event = 7;
    }
}

enum OrderEventType {
    INVALID_ORDER_EVENT_TYPE = 0;
    // [#example-value-ok:]
    CREATE = 1;
    // [#example-value-ok:]
    FILL = 2;
    // [#example-value-ok:]
    CANCEL = 3;
}

message GetOrderEventsRequest {
    // Only return order events for provided markets. If empty, events for all markets are returned.
    repeated common.Market markets = 1 [
        (validate.rules).repeated .unique = true,
        (validate.rules).repeated .items.enum = { not_in: [ 0 ], defined_only: true }
    ];
    repeated OrderEventType event_type = 2 [
        (validate.rules).repeated .unique = true,
        (validate.rules).repeated .items.enum = { not_in: [ 0 ], defined_only: true }
    ];
    common.SearchDirection search_direction = 3 [(validate.rules).enum = { not_in: [ 0 ], defined_only: true }];
    // The ID or timestamp of the earliest order event in the case of forward search direction,
    // otherwise the ID or timestamp of the latest order event.
    // If omitted, ``start = 0`` for ``search_direction = FORWARD`` and ``start = <infinity>`` for ``search_direction =
    // BACKWARD``
    oneof start {
        fixed64 order_id = 4 [jstype = JS_STRING, (validate.rules).fixed64.gt = 0];
        fixed64 timestamp_ns = 5 [jstype = JS_STRING, (validate.rules).fixed64.gt = 0];
        fixed64 event_id = 6 [jstype = JS_STRING, (validate.rules).fixed64.gt = 0];
    }
    // Maximum number of order events returned. Defaults to 1000.
    uint32 limit = 7 [(validate.rules).uint32 = { gte: 0, lte: 1000 }, (common.default_limit) = 1000];
}

message StreamOrderEventsRequest {
    // Only stream order events for provided markets. If empty, events for all markets are streamed.
    repeated common.Market markets = 1 [
        (validate.rules).repeated .unique = true,
        (validate.rules).repeated .items.enum = { not_in: [ 0 ], defined_only: true }
    ];
    repeated OrderEventType event_type = 2 [
        (validate.rules).repeated .unique = true,
        (validate.rules).repeated .items.enum = { not_in: [ 0 ], defined_only: true }
    ];
    common.SearchDirection search_direction = 3 [(validate.rules).enum = { not_in: [ 0 ], defined_only: true }];
    // The ID or timestamp of the earliest order event in the case of forward search direction,
    // otherwise the ID or timestamp of the latest order event.
    // If omitted, ``start = now``
    oneof start {
        fixed64 order_id = 4 [jstype = JS_STRING, (validate.rules).fixed64.gt = 0];
        fixed64 timestamp_ns = 5 [jstype = JS_STRING, (validate.rules).fixed64.gt = 0];
        fixed64 event_id = 6 [jstype = JS_STRING, (validate.rules).fixed64.gt = 0];
    }
}

message GetEventsForOrderRequest {
    fixed64 order_id = 1 [jstype = JS_STRING, (validate.rules).fixed64.gt = 0];
    common.Market market = 2 [(validate.rules).enum = { not_in: [ 0 ], defined_only: true }];
    common.SearchDirection search_direction = 3 [(validate.rules).enum = { not_in: [ 0 ], defined_only: true }];
    // Optional: The event ID of the earliest order event.
    // If omitted, ``start = 0`` for ``search_direction = FORWARD`` and ``start = <infinity>`` for ``search_direction =
    // BACKWARD``
    fixed64 start_event_id = 4 [jstype = JS_STRING];
    // Maximum number of order events returned. Defaults to 1000.
    uint32 limit = 5 [(validate.rules).uint32 = { gte: 0, lte: 1000 }, (common.default_limit) = 1000];
}

message GetOrderEventsResponse {
    repeated OrderEvent events = 1;
}

message GetActiveOrdersRequest {}

message StreamActiveOrdersRequest {}

service PrivateOrderService {
    rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse);
    rpc CancelOrder(CancelOrderRequest) returns (CancelOrderResponse);
    // Request up to 1000 order events.
    // Note: we do not guarantee events arrive in the exact correct ordering, nor that they are deduplicated.
    rpc GetOrderEvents(GetOrderEventsRequest) returns (GetOrderEventsResponse);
    // Stream order events.
    // Note: we do not guarantee events arrive in the exact correct ordering, nor that they are deduplicated.
    rpc StreamOrderEvents(StreamOrderEventsRequest) returns (stream OrderEvent);
    // Request all order events for a specific order.
    rpc GetEventsForOrder(GetEventsForOrderRequest) returns (GetOrderEventsResponse);
}

service PrivateActiveOrdersService {
    rpc GetActiveOrders(GetActiveOrdersRequest) returns (OrderbookSnapshot);
    rpc StreamActiveOrders(StreamActiveOrdersRequest) returns (stream ActiveOrderStatus);
}
