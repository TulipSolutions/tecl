// Copyright 2019 Tulip Solutions B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// [#protodoc-title: Private trade]

syntax = "proto3";
package tulipsolutions.api.priv;

option java_multiple_files = true;
option java_package = "nl.tulipsolutions.api.priv";
option go_package = "github.com/tulipsolutions/tecl/tulipsolutions/api/priv/trade";

import "validate/validate.proto";
import "tulipsolutions/api/common/orders.proto";
import "tulipsolutions/api/common/options.proto";

// Request your trades on a single market. If trade_id and timestamp_ns are not provided, it will return the most recent
// amount of trades, limited by the number given in limit.
message GetPrivateTradesRequest {
    common.Market market = 1 [(validate.rules).enum = { not_in: [ 0 ], defined_only: true }];
    // [#comment:TODO: need to find a fix to query all private trades due to missing Global unique trade ids]
    oneof from {
        // Return trades with id greater or equal to the one given.
        fixed64 trade_id = 2 [jstype = JS_STRING, (validate.rules).fixed64.gt = 0];
        // Return trades with timestamp greater or equal. Unit in nanoseconds.
        fixed64 timestamp_ns = 3 [jstype = JS_STRING, (validate.rules).fixed64.gt = 0];
    }
    // Maximum number of trades returned. Defaults to 1000.
    uint32 limit = 4 [(validate.rules).uint32 = { gte: 0, lte: 1000 }, (common.default_limit) = 1000];
}

// Stream your trades on a single market. If `trade_id` and `timestamp_ns` are not provided, it will only stream trades
// occurred after initiation of the request.
message StreamPrivateTradesRequest {
    common.Market market = 1 [(validate.rules).enum = { not_in: [ 0 ], defined_only: true }];
    // From which trade_id or timestamp trades will be returned, default: now
    oneof from {
        // Stream trades with id greater or equal to the one given.
        fixed64 trade_id = 2 [jstype = JS_STRING, (validate.rules).fixed64.gt = 0];
        // Stream trades with timestamp greater or equal. Unit in nanoseconds.
        fixed64 timestamp_ns = 3 [jstype = JS_STRING, (validate.rules).fixed64.gt = 0];
    }
}

// Similar to :protobuf:message:`tulipsolutions.api.pub.PublicTrade`, but includes information about your matched Order
// ID and the fees charged.
//
// See also: :ref:`faq_trade_order_id_unique`
message PrivateTrade {
    common.Market market = 1;
    fixed64 trade_id = 2 [jstype = JS_STRING];
    fixed64 order_id = 3 [jstype = JS_STRING];
    double price = 4;
    double base_amount = 5;
    double quote_amount = 6;
    double fee = 7;
    common.Currency fee_currency = 8;
    common.Side side = 9;
    fixed64 timestamp_ns = 10 [jstype = JS_STRING];
}

message PrivateTrades {
    repeated PrivateTrade trades = 1;
}

service PrivateTradeService {
    rpc GetTrades(GetPrivateTradesRequest) returns (PrivateTrades);
    rpc StreamTrades(StreamPrivateTradesRequest) returns (stream PrivateTrade);
}
