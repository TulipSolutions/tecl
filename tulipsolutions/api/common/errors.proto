// Copyright 2019 Tulip Solutions B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// [#protodoc-title: Common errors]
// Commonly used protocol objects for errors.

syntax = "proto3";
package tulipsolutions.api.common;

option java_multiple_files = true;
option java_package = "nl.tulipsolutions.api.common";
option go_package = "github.com/tulipsolutions/tecl/tulipsolutions/api/common/errors";

import "tulipsolutions/api/common/orders.proto";

message BaseOrderAmountTooSmall {
    double base_amount = 1;
    double min_base_amount = 2;
}

message BaseOrderAmountTooLarge {
    double base_amount = 1;
    double max_base_amount = 2;
}

message QuoteOrderAmountTooSmall {
    double quote_amount = 1;
    double min_quote_amount = 2;
}

message QuoteOrderAmountTooLarge {
    double quote_amount = 1;
    double max_quote_amount = 2;
}

message InsufficientBalance {
    double order_size = 1;
    double funds_available = 2;
    Currency currency = 3;
}

message OrderIdNotExist {
    fixed64 order_id = 1;
    Market market = 2;
}

message MarketDisabled {
    Market market = 1;
}

// Amount precision too high. For example, when placing an order for 0.3 satoshi when a market only allows
// you to buy/sell whole satoshi's.
//
// See also: :ref:`faq_supported_price_precision`
message InvalidAmountPrecision {
    int32 digits_given = 1;
    int32 digits_max = 2;
}

// price precision too high. For example, when attempting to place an order for 40.1 satoshi when the
// market only allows pricing in whole satoshi.
//
// See also: :ref:`faq_supported_price_precision`
message InvalidPricePrecision {
    int32 digits_given = 1;
    int32 digits_max = 2;
}

message TonceAlreadyUsed {
    fixed64 tonce = 1;
}

message TonceTooNew {
    fixed64 message_accepted_timestamp_ns = 1;
    fixed64 tonce = 2;
    fixed64 max_difference = 3;
}

message TonceTooOld {
    fixed64 message_accepted_timestamp_ns = 1;
    fixed64 tonce = 2;
    fixed64 max_difference = 3;
}

message DeadlineExceeded {
    fixed64 deadline_ns = 1;
    fixed64 received_at_ns = 2;
}
