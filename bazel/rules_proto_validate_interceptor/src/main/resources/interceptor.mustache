// Generated by the tulipsolutions protoc validate interceptor plugin.  DO NOT EDIT!

package {{package_name}};

import java.util.List;
import com.google.protobuf.Any;
import com.google.rpc.Code;
import com.google.rpc.Status;
import io.envoyproxy.pgv.ReflectiveValidatorIndex;
import io.envoyproxy.pgv.ValidationException;
import io.grpc.ForwardingServerCallListener;
import io.grpc.Metadata;
import io.grpc.StatusRuntimeException;
import io.grpc.ServerCall;
import io.grpc.ServerCallHandler;
import io.grpc.ServerInterceptor;
import io.grpc.protobuf.StatusProto;
import nl.tulipsolutions.api.common.ValidateViolation;

public class {{class_name}} implements ServerInterceptor {
    {{#request_types}}
    private {{getValidatorClassName}} {{getValidatorVariableName}} = new {{getValidatorClassName}}();
    {{/request_types}}
    private ReflectiveValidatorIndex validatorIndex = new ReflectiveValidatorIndex();

    @Override
    public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call, Metadata headers, ServerCallHandler<ReqT, RespT> next) {
        return new ForwardingServerCallListener.SimpleForwardingServerCallListener<ReqT>(next.startCall(call, headers)) {
            private boolean aborted = false;

            @Override
            public void onMessage(ReqT message) {
                try {
                    if (message instanceof {{getFirstRequestType.getProtobufTypeName}}) {
                        {{getFirstRequestType.getValidatorVariableName}}.assertValid(({{getFirstRequestType.getProtobufTypeName}}) message, validatorIndex);
                    }
                    {{#skipFirstRequestType}}
                    else if (message instanceof {{getProtobufTypeName}}) {
                        {{getValidatorVariableName}}.assertValid(({{getProtobufTypeName}}) message, validatorIndex);
                    }
                    {{/skipFirstRequestType}}
                    else {
                        throw new ValidationException("", message, "Invalid input");
                    }

                    super.onMessage(message);
                } catch (ValidationException ex) {
                    ValidateViolation validateViolation = ValidateViolation.newBuilder()
                        .setField(ex.getField())
                        .setValue(ex.getValue().toString())
                        .setReason(ex.getReason())
                        .build();

                    // Note: this is a fairly complex way of generating a status with metadata but the required methods
                    // in io.grpc.protobuf.StatusProto are private and this way we guarantee compatibility with
                    // com.google.rpc.Status
                    Status status = Status.newBuilder()
                        .setCode(Code.INVALID_ARGUMENT.getNumber())
                        .setMessage(ex.getMessage())
                        .addAllDetails(List.of(Any.pack(validateViolation)))
                        .build();
                    StatusRuntimeException statusRuntimeException = StatusProto.toStatusRuntimeException(status);

                    aborted = true;
                    call.close(statusRuntimeException.getStatus(), statusRuntimeException.getTrailers());
                }
            }

            @Override
            public void onHalfClose() {
                if (!aborted) {
                    super.onHalfClose();
                }
            }
        };
    }
}
